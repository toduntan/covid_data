
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(data.table)
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:data.table':

    between, first, last

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(readxl)
> library(stringr)
> library(lubridate)

Attaching package: 'lubridate'

The following objects are masked from 'package:data.table':

    hour, isoweek, mday, minute, month, quarter, second, wday, week,
    yday, year

The following object is masked from 'package:base':

    date

> 
> # Proxy needed for fetching data from Github
> #Sys.setenv(HTTPS_PROXY="http://webproxy.merck.com:8081")
> 
> #declare JHU url directory
> jhu_url_stub<-"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data"
> 
> #declare directory for global confirmed case time series
> covid19_confirmed_global_url <- "/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
> 
> #declare directory for global deaths time series
> covid19_deaths_global_url <- "/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
> 
> #declare directory for global recovered time series
> covid19_recovered_global_url <- "/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
> 
> #declare directory for US confirmed time series
> covid19_confirmed_US_url <- "/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"
>   
> #declare directory for US death time series
> covid19_deaths_US_url <- "/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"
> 
> #declare URLS for snapshot (map data)
> url_dir<-paste0('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/')
> date<-Sys.Date()-1
> file_date<-paste0(str_pad(month(date),width = 2,pad='0'),'-',str_pad(day(date),width = 2,pad='0'),'-',year(date),'.csv')
> confirmed_data_url_snapshot<-paste0(url_dir,file_date)
> 
> # Fetch the Github timeseries data and unpivot (melt) for time series 
> time_series_covid19_confirmed_global <- suppressWarnings(melt(fread(paste0(jhu_url_stub,covid19_confirmed_global_url)), id.vars = c(1:4), variable.name = "Date", value.name = "Cases"))
> 
> # Fetch the Github timeseries data and unpivot (melt) for time series 
> time_series_covid19_deaths_global <- suppressWarnings(melt(fread(paste0(jhu_url_stub,covid19_deaths_global_url)), id.vars = c(1:4), variable.name = "Date", value.name = "Cases"))
> 
> # Fetch the Github timeseries data and unpivot (melt) for time series 
> time_series_covid19_recovered_global <- suppressWarnings(melt(fread(paste0(jhu_url_stub,covid19_recovered_global_url)), id.vars = c(1:4), variable.name = "Date", value.name = "Cases"))
> 
> # Fetch the Github timeseries data and unpivot (melt) for time series 
> time_series_covid19_confirmed_US <- suppressWarnings(melt(fread(paste0(jhu_url_stub,covid19_confirmed_US_url)), id.vars = c(1:11), variable.name = "Date", value.name = "Cases"))
> 
> # Fetch the Github timeseries data and unpivot (melt) for time series 
> time_series_covid19_deaths_US <- suppressWarnings(melt(fread(paste0(jhu_url_stub,covid19_deaths_US_url)), id.vars = c(1:12), variable.name = "Date", value.name = "Cases"))
> 
> #Stores dataframes as CSV files in appropriate directory
> #write.csv(covid19map, "C:\\projects\\covid_data\\data_files\\covid19map.csv",row.names = FALSE)
> write.csv(time_series_covid19_confirmed_global, "C:\\projects\\covid_data\\data_files\\time_series_covid19_confirmed_global.csv",row.names = FALSE)
> write.csv(time_series_covid19_deaths_global, "C:\\projects\\covid_data\\data_files\\time_series_covid19_deaths_global.csv",row.names = FALSE)
> write.csv(time_series_covid19_recovered_global, "C:\\projects\\covid_data\\data_files\\time_series_covid19_recovered_global.csv",row.names = FALSE)
> write.csv(time_series_covid19_confirmed_US, "C:\\projects\\covid_data\\data_files\\time_series_covid19_confirmed_US.csv",row.names = FALSE)
> write.csv(time_series_covid19_deaths_US, "C:\\projects\\covid_data\\data_files\\time_series_covid19_deaths_US.csv",row.names = FALSE)
> 
> proc.time()
   user  system elapsed 
   6.53    0.32    7.10 
